This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-07T08:59:17.907Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
docs/
  about.md
  configuration.md
  integration.md
modules/
  johnny-mnemonix.nix
tests/
  home-manager/
    example-config.nix
.gitignore
.markdownlint.yaml
CHANGELOG.md
CONTRIBUTING.md
default.nix
flake.lock
flake.nix
README.md

================================================================
Repository Files
================================================================

================
File: docs/about.md
================
# About Johnny-Mnemonix

## Philosophy

Johnny-Mnemonix combines two powerful ideas:
1. The organizational clarity of the Johnny.Decimal system
2. The reproducibility and declarative nature of Nix

The goal is to make document management both systematic and reproducible across systems, while maintaining the flexibility to adapt to individual needs.

## Core Concepts

### Johnny.Decimal System

The Johnny.Decimal system organizes information into a three-level hierarchy:

1. **Areas (10-19, 20-29, etc.)**
   - High level and distinct domains of your information
   - Like shelves in a bookcase
   - Each spans a range of numbers, the first number being the constant among the range (e.g., 10-19)

2. **Categories (11.xx, 12.xx, etc.)**
   - Specific groupings within areas
   - Like boxes (box-sets) on the shelves
   - Two-digit numbers within the area's range

3. **IDs (11.01, 11.02, etc.)**
   - Individual locations for items
   - Like books in the boxes
   - Format: Category.Index (e.g., 11.01)

### Nix Integration

Johnny-Mnemonix leverages Nix to make this system:

- **Declarative**: Your entire document structure is defined in code
- **Reproducible**: The same structure can be recreated on any system
- **Verifiable**: Built-in tests ensure your structure remains valid
- **Portable**: Works across Linux and Darwin systems
- **Integrated**: Works seamlessly with Home Manager

### Shell Integration

The project provides intuitive shell commands for navigation:

```bash
# Navigate to document root
jm

# Jump to specific locations
jm 11.01   # Goes to first item in category 11
jm finance  # Fuzzy finds finance-related directories

# List and search
jmls        # List document root
jmfind tax  # Find tax-related directories
```

## Why "Mnemonix"?

The name combines three elements:
1. **Johnny** - From Johnny.Decimal, the organizational system
2. **Mnemonic** - Greek for "memory aid" (the system helps remember locations)
3. **Nix** - The package manager and system configuration tool

It's also a nod to William Gibson's "Johnny Mnemonic" - a character who, like our system, helps manage and organize digital information.

## Design Principles

1. **Non-destructive**
   - Never deletes existing files
   - Safely merges with existing structures
   - Preserves user data

2. **Minimal Configuration**
   - Sensible defaults
   - Only configure what you need
   - Clear, focused options

3. **Shell-First**
   - Fast command-line navigation
   - Tab completion
   - Fuzzy finding

4. **XDG Compliant**
   - Follows XDG Base Directory specification
   - Respects system conventions
   - Clean home directory

## Getting Started

See our [Configuration Guide](./configuration.md) for detailed setup instructions, or check out the [examples](../examples) directory for quick-start configurations.

================
File: docs/configuration.md
================
# Configuration Guide

## Flake Integration

First, add Johnny-Mnemonix to your flake inputs:

```nix
{
  inputs = {
    johnny-mnemonix = {
      url = "github:lessuselesss/johnny-mnemonix";
      inputs.nixpkgs.follows = "nixpkgs";  # Optional but recommended
    };
  };
}
```

## Home Manager Integration

For Darwin/MacOS systems, add it to your darwin configuration:

```nix
{
  home-manager.users.${user} = { config, ... }: {
    imports = [johnny-mnemonix.homeManagerModules.default];
    
    johnny-mnemonix = {
      enable = true;
      baseDir = "${config.home.homeDirectory}/Documents";
      shell = {
        enable = true;
        prefix = "jm";
        aliases = true;
        functions = true;
      };
      areas = {
        "10-19" = {
          name = "Personal";
          categories = {
            "11" = {
              name = "Finance";
              items = {
                "11.01" = "Budget";
                "11.02" = "Investments";
              };
            };
          };
        };
      };
    };
  };
}
```

For NixOS systems, add it to your NixOS configuration:

```nix
{
  home-manager.users.${user} = { config, ... }: {
    imports = [johnny-mnemonix.homeManagerModules.default];
    # Same configuration as above
  };
}
```

## Configuration Options

### Required Options

| Option | Type | Description |
|--------|------|-------------|
| `enable` | boolean | Must be set to `true` to activate the module |
| `baseDir` | string | Base directory for document structure (e.g., `${config.home.homeDirectory}/Documents`) |

### Shell Integration Options

| Option | Type | Default | Description |
|--------|------|---------|-------------|
| `shell.enable` | boolean | `false` | Enable shell integration |
| `shell.prefix` | string | `"jm"` | Command prefix for shell functions |
| `shell.aliases` | boolean | `false` | Enable shell aliases |
| `shell.functions` | boolean | `false` | Enable shell functions |

### Area Configuration

Areas must follow the Johnny Decimal format:

```nix
areas = {
  "10-19" = {
    name = "Personal";
    categories = {
      "11" = {
        name = "Finance";
        items = {
          "11.01" = "Budget";
          "11.02" = "Investments";
        };
      };
    };
  };
};
```

### Git Repository Examples

```nix
items = {
  # Basic repository - clones everything
  "11.01" = {
    url = "https://github.com/user/repo";
  };

  # Repository with specific branch
  "11.02" = {
    url = "https://github.com/user/repo";
    ref = "develop";  # Checkout this branch after cloning
  };

  # Repository with sparse checkout (partial clone)
  "11.03" = {
    url = "https://github.com/user/large-repo";
    ref = "main";
    # Only these paths will be checked out, saving disk space
    # and reducing initial clone time
    sparse = [
      # Directory patterns
      "docs/*.md"              # Only markdown files directly in docs/
      "docs/**/*.md"           # Markdown files in docs/ and all subdirectories
      "src/components/"        # Everything in the components directory
      
      # File patterns
      "README.md"              # Single file in root
      "package.json"           # Another single file
      
      # Multiple file types
      "assets/*.{png,jpg}"     # PNG and JPG files in assets/
      
      # Complex patterns
      "src/*/index.js"         # index.js in any immediate subdirectory of src/
      "tests/**/*_test.js"     # All test files in tests/ and subdirectories
      
      # Negative patterns (exclude)
      "!node_modules/**"       # Exclude all node_modules content
      "!**/*.log"             # Exclude all log files everywhere
    ];
  };

  # Private repository using SSH
  "11.04" = {
    url = "git@github.com:user/private-repo.git";
    ref = "main";
  };
};
```

#### Understanding Sparse Checkout Patterns

The `sparse` option uses Git's sparse-checkout pattern syntax:

| Pattern | Example | Description |
|---------|---------|-------------|
| `*` | `docs/*` | Matches any string except `/` |
| `**` | `docs/**` | Matches any string including `/` |
| `{x,y}` | `*.{jpg,png}` | Matches any of the alternatives |
| `!pattern` | `!node_modules` | Excludes matching paths |

Common use cases:
```nix
sparse = [
  # Documentation only
  "docs/**"                # All documentation files
  "*.md"                   # All markdown files in root
  
  # Source code subset
  "src/specific-module/**" # Just one module
  "src/**/*.ts"           # All TypeScript files
  
  # Configuration files
  "config/*.json"         # JSON configs in config/
  ".*rc"                 # All RC files in root
  
  # Mixed content
  "assets/images/*.svg"   # SVG files only
  "scripts/deploy/*"      # Deployment scripts only
  
  # Exclude patterns
  "!**/*.test.js"        # No test files
  "!**/dist/**"          # No build artifacts
];
```

**Important Notes:**
- Patterns are evaluated in order
- Later patterns can override earlier ones
- More specific patterns should come after general ones
- Exclude patterns (`!`) should typically come last
- Empty list means full checkout (no sparse-checkout)
```

## Verification

After configuration:

1. Run your system update command:
   - For NixOS: `nixos-rebuild switch`
   - For Darwin: `darwin-rebuild switch`
   - For Home Manager: `home-manager switch`

2. Verify directory creation:
   ```bash
   ls ~/Documents/10-19\ Personal/11\ Finance/
   ```

3. Test shell commands (if enabled):
   ```bash
   jm          # Navigate to base directory
   jmls        # List contents
   jm 11.01    # Navigate to specific item
   ```

================
File: docs/integration.md
================
# Integration Guide

This guide covers how to integrate Johnny-Mnemonix with other tools and systems in your development environment.

## Home Manager Integration

### Basic Integration

Add Johnny-Mnemonix to your flake inputs:

```nix
{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    johnny-mnemonix.url = "github:lessuselesss/johnny-mnemonix";
  };
}
```

Import the module in your Home Manager configuration:

```nix
{
  imports = [
    johnny-mnemonix.homeManagerModules.default
  ];
}
```

### Multiple User Configurations

For systems with multiple users:

```nix
{
  homeManagerConfigurations = {
    user1 = home-manager.lib.homeManagerConfiguration {
      modules = [
        johnny-mnemonix.homeManagerModules.default
        {
          johnny-mnemonix = {
            enable = true;
            baseDir = "~/Documents";
          };
        }
      ];
    };
    user2 = home-manager.lib.homeManagerConfiguration {
      modules = [
        johnny-mnemonix.homeManagerModules.default
        {
          johnny-mnemonix = {
            enable = true;
            baseDir = "~/workspace";  # Different base directory
          };
        }
      ];
    };
  };
}
```

## Shell Integration

### Zsh Integration

Johnny-Mnemonix automatically integrates with Zsh when enabled:

```nix
{
  johnny-mnemonix.shell = {
    enable = true;
    prefix = "jm";  # Default prefix
  };
  
  programs.zsh.enable = true;  # Required for Zsh integration
}
```

### Bash Integration

Similar configuration for Bash users:

```nix
{
  johnny-mnemonix.shell = {
    enable = true;
    prefix = "jm";
  };
  
  programs.bash.enable = true;  # Required for Bash integration
}
```

### Custom Shell Functions

You can extend the shell integration with custom functions:

```nix
{
  programs.zsh.initExtra = ''
    # Custom function to create new document
    ${config.johnny-mnemonix.shell.prefix}-new() {
      local id="$1"
      local name="$2"
      if [[ -z "$id" || -z "$name" ]]; then
        echo "Usage: jm-new <id> <name>"
        return 1
      fi
      mkdir -p "$(${config.johnny-mnemonix.shell.prefix}find "$id")/$name"
    }
  '';
}
```

## Git Integration

### Repository Structure

Johnny-Mnemonix works well with Git-managed documents. Recommended structure:

```
Documents/
├── .git/
├── 10-19 Personal/
│   └── .gitignore  # Category-specific ignores
├── 20-29 Work/
│   └── .gitignore
└── .gitignore      # Global ignores
```

### Example .gitignore

```gitignore
# Global ignores
.DS_Store
*.log
*.tmp

# Category-specific patterns
10-19 Personal/11 Finance/**/*.pdf
20-29 Work/21 Projects/**/*.secret
```

## XDG Integration

Johnny-Mnemonix follows XDG Base Directory specifications:

```nix
{
  johnny-mnemonix = {
    enable = true;
    # Configuration stored in $XDG_CONFIG_HOME/johnny-mnemonix
    # Cache stored in $XDG_CACHE_HOME/johnny-mnemonix
    # Data stored in $XDG_DATA_HOME/johnny-mnemonix
  };
}
```

## Development Tools Integration

### Pre-commit Hooks

Johnny-Mnemonix includes pre-commit hooks for maintaining code quality:

```yaml
# .pre-commit-config.yaml
repos:
  - repo: local
    hooks:
      - id: johnny-mnemonix-check
        name: Check Johnny-Mnemonix structure
        entry: nix run .#check
        language: system
        pass_filenames: false
```

### Direnv Integration

For project-specific environment variables:

```nix
# .envrc
use flake
export JOHNNY_MNEMONIX_BASE="$PWD"
```

## Testing Integration

Johnny-Mnemonix includes a test suite that can be integrated into your CI/CD pipeline:

```nix
{
  checks = forAllSystems (system: {
    vm-test = import ./tests {
      pkgs = pkgsForSystem system;
    };
  });
}
```

### Running Tests Locally

```bash
# Run all tests
nix flake check

# Run specific test
nix eval .#checks.x86_64-linux.vm-test
```

## IDE Integration

### VSCode Settings

Recommended settings for VSCode:

```json
{
  "files.associations": {
    "*.jd": "markdown"
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true,
    "**/.[0-9][0-9].*": true
  }
}
```

### Emacs Configuration

For Emacs users:

```elisp
(use-package johnny-mnemonix
  :mode ("\\.jd\\'" . markdown-mode)
  :hook (markdown-mode . johnny-mnemonix-mode))
```

## Future Integrations

We're working on integrations with:
- Typst document processor
- NixOS container support
- Remote filesystem synchronization
- Additional shell environments

For more information on upcoming integrations, see our [roadmap](./roadmap.md).

================
File: modules/johnny-mnemonix.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.johnny-mnemonix;

  # Create a wrapper script that ensures proper SSH and Git configuration
  gitWithSsh = pkgs.writeShellScriptBin "git-with-ssh" ''
    # Ensure SSH knows about GitHub's host key
    if [ ! -f ~/.ssh/known_hosts ] || ! grep -q "^github.com" ~/.ssh/known_hosts; then
      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
      ${pkgs.openssh}/bin/ssh-keyscan github.com >> ~/.ssh/known_hosts 2>/dev/null
    fi

    # Set Git to use SSH
    export GIT_SSH="${pkgs.openssh}/bin/ssh"
    export PATH="${lib.makeBinPath [pkgs.git pkgs.openssh]}:$PATH"

    # Run Git command
    exec git "$@"
  '';

  # Rename to itemOptionsType since it now handles more than just git
  itemOptionsType = types.submodule {
    options = {
      name = mkOption {
        type = types.str;
        description = "Directory name for the item";
      };
      # Git options
      url = mkOption {
        type = types.nullOr types.str;
        default = null;
        description = "Optional Git repository URL";
      };
      ref = mkOption {
        type = types.str;
        default = "main";
        description = "Git reference (branch, tag, or commit)";
      };
      sparse = mkOption {
        type = types.listOf types.str;
        default = [];
        description = "Sparse checkout patterns (empty for full checkout)";
      };
      # Symlink option
      target = mkOption {
        type = types.nullOr types.str;
        default = null;
        description = "Optional path to create symlink to";
      };
    };
  };

  # Update the item type to support both strings and the new options
  itemType = types.either types.str itemOptionsType;

  # Helper to create directories and clone repositories
  mkAreaDirs = areas: let
    mkCategoryDirs = areaId: areaConfig: categoryId: categoryConfig:
      concatMapStrings (itemId: let
        itemConfig = categoryConfig.items.${itemId};
        baseItemPath = "${cfg.baseDir}/${areaId}-${areaConfig.name}/${categoryId}-${categoryConfig.name}/${itemId}";
      in
        if isString itemConfig
        then ''
          mkdir -p "${baseItemPath}-${itemConfig}"
        ''
        else ''
          # Create parent directory if it doesn't exist
          mkdir -p "$(dirname "${baseItemPath}")"

          ${
            if itemConfig.url != null
            then ''
              # Git repository handling
              if [ ! -d "${baseItemPath}-${itemConfig.name}" ]; then
                ${gitWithSsh}/bin/git-with-ssh clone ${
                if itemConfig.sparse != []
                then "--sparse"
                else ""
              } \
                  --branch ${itemConfig.ref} \
                  ${itemConfig.url} "${baseItemPath}-${itemConfig.name}"

                ${optionalString (itemConfig.sparse != []) ''
                cd "${baseItemPath}-${itemConfig.name}"
                ${gitWithSsh}/bin/git-with-ssh sparse-checkout set ${concatStringsSep " " itemConfig.sparse}
              ''}
              fi
            ''
            else if itemConfig.target != null
            then ''
              # Symlink handling
              if [ ! -e "${baseItemPath}-${itemConfig.name}" ]; then
                ln -s "${itemConfig.target}" "${baseItemPath}-${itemConfig.name}"
              fi
            ''
            else ''
              # Regular directory
              mkdir -p "${baseItemPath}-${itemConfig.name}"
            ''
          }
        '') (attrNames categoryConfig.items);

    mkAreaDir = areaId: areaConfig:
      concatMapStrings (
        categoryId:
          mkCategoryDirs areaId areaConfig categoryId areaConfig.categories.${categoryId}
      ) (attrNames areaConfig.categories);
  in ''
    # Ensure base directory exists first
    mkdir -p "${cfg.baseDir}"

    # Create area directories
    ${concatMapStrings (
      areaId:
        mkAreaDir areaId areas.${areaId}
    ) (attrNames areas)}
  '';

  # Helper to create shell functions
  mkShellFunctions = prefix: ''
    # Basic navigation
    ${prefix}() {
      local base="${cfg.baseDir}"
      if [ -z "$1" ]; then
        cd "$base"
      else
        local target=$(find "$base" -type d -name "*$1*" | head -n 1)
        if [ -n "$target" ]; then
          cd "$target"
        else
          echo "No matching directory found"
          return 1
        fi
      fi
    }

    # Up navigation
    ${prefix}-up() {
      cd ..
    }

    # Listing commands
    ${prefix}ls() {
      ls "${cfg.baseDir}"
    }

    ${prefix}l() {
      ls -l "${cfg.baseDir}"
    }

    ${prefix}ll() {
      ls -la "$@"
    }

    ${prefix}la() {
      ls -la "$@"
    }

    # Find command
    ${prefix}find() {
      if [ -z "$1" ]; then
        echo "Usage: ${prefix}find <pattern>"
        return 1
      fi
      find "${cfg.baseDir}" -type d -name "*$1*"
    }

    # Basic command completion
    if [[ -n "$ZSH_VERSION" ]]; then
      # ZSH completion
      compdef _jm_completion ${prefix}
      compdef _jm_completion ${prefix}ls
      compdef _jm_completion ${prefix}find

      function _jm_completion() {
        local curcontext="$curcontext" state line
        typeset -A opt_args

        case "$words[1]" in
          ${prefix})
            _arguments '1:directory:_jm_dirs'
            ;;
          ${prefix}ls)
            _arguments '1:directory:_jm_dirs'
            ;;
          ${prefix}find)
            _message 'pattern to search for'
            ;;
        esac
      }

      function _jm_dirs() {
        local base="${cfg.baseDir}"
        _files -W "$base" -/
      }

    elif [[ -n "$BASH_VERSION" ]]; then
      # Bash completion
      complete -F _jm_completion ${prefix}
      complete -F _jm_completion ${prefix}ls
      complete -F _jm_completion ${prefix}find

      function _jm_completion() {
        local cur prev
        COMPREPLY=()
        cur="$2"
        prev="$3"
        base="${cfg.baseDir}"

        case "$1" in
          ${prefix})
            COMPREPLY=($(compgen -d "$base/$cur" | sed "s|$base/||"))
            ;;
          ${prefix}ls)
            COMPREPLY=($(compgen -d "$base/$cur" | sed "s|$base/||"))
            ;;
          ${prefix}find)
            # No completion for find pattern
            ;;
        esac
      }
    fi
  '';
in {
  options.johnny-mnemonix = {
    enable = mkEnableOption "johnny-mnemonix";

    baseDir = mkOption {
      type = types.str;
      description = "Base directory for johnny-mnemonix";
    };

    shell = {
      enable = mkEnableOption "shell integration";
      prefix = mkOption {
        type = types.str;
        default = "jm";
        description = "Command prefix for shell integration";
      };
      aliases = mkEnableOption "shell aliases";
      functions = mkEnableOption "shell functions";
    };

    areas = mkOption {
      type = types.attrsOf (types.submodule {
        options = {
          name = mkOption {
            type = types.str;
            description = "Name of the area";
          };
          categories = mkOption {
            type = types.attrsOf (types.submodule {
              options = {
                name = mkOption {
                  type = types.str;
                  description = "Name of the category";
                };
                items = mkOption {
                  type = types.attrsOf itemType;
                  description = "Items in the category (string or git repository)";
                };
              };
            });
            description = "Categories within the area";
          };
        };
      });
      default = {};
      description = "Areas configuration";
    };
  };

  config = mkIf cfg.enable (mkMerge [
    {
      # Consolidate all home-related configurations
      home = {
        # Required packages
        packages = with pkgs; [
          git
          openssh
          gitWithSsh # Add our wrapper script
        ];

        # Add SSH configuration
        file.".ssh/config".text = ''
          Host github.com
            User git
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking accept-new
        '';

        # Activation script
        activation.createJohnnyMnemonixDirs = lib.hm.dag.entryAfter ["writeBoundary"] ''
          # Ensure SSH directory exists with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Create Johnny Mnemonix directories...
          ${mkAreaDirs cfg.areas}
        '';

        # File configurations
        file = {
          # Any file-related configurations would go here
        };
      };

      programs.zsh = mkIf cfg.shell.enable {
        enable = true;
        enableCompletion = true;
        initExtraFirst = ''
          # Source johnny-mnemonix functions
          if [ -f $HOME/.local/share/johnny-mnemonix/shell-functions.sh ]; then
            source $HOME/.local/share/johnny-mnemonix/shell-functions.sh
          fi
        '';
      };
    }
  ]);
}

================
File: tests/home-manager/example-config.nix
================
_: {
  # Basic home-manager configuration
  home = {
    username = "test";
    homeDirectory = "/home/test";
    stateVersion = "23.11";
  };

  # Johnny-Mnemonix configuration
  johnny-mnemonix = {
    enable = true;
    areas = {
      "10-19" = {
        name = "Personal";
        categories = {
          "11" = {
            name = "Projects";
            items = {
              "11.01" = "Budget";
              "11.02" = {
                url = "https://github.com/user/project";
                ref = "main";
              };
              "11.03" = {
                url = "https://github.com/user/large-repo";
                ref = "develop";
                sparse = [
                  "docs/*"
                  "src/specific-folder"
                ];
              };
            };
          };
        };
      };
    };
  };
}

================
File: .gitignore
================
.pre-commit-config.yaml

================
File: .markdownlint.yaml
================
default: true
MD013: false  # Line length
MD033: false  # Inline HTML
MD041: false  # First line h1

================
File: CHANGELOG.md
================
# Changelog

All notable changes to Johnny-Mnemonix will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Initial project structure
- Core module functionality
- Directory structure creation
- Shell integration (bash, zsh, fish)
- Validation for Johnny Decimal structure
- Documentation and examples

### Changed
- None

### Deprecated
- None

### Removed
- None

### Fixed
- None

### Security
- None

## [0.1.0] - YYYY-MM-DD
- Initial release

[Unreleased]: https://github.com/lessuselesss/johnny-mnemonix/compare/v0.1.0...HEAD
[0.1.0]: https://github.com/lessuselesss/johnny-mnemonix/releases/tag/v0.1.0

================
File: CONTRIBUTING.md
================
# Contributing to Johnny-Mnemonix

Thank you for your interest in contributing to Johnny-Mnemonix! This document provides guidelines and information for contributors.

## Code of Conduct

Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.

## Getting Started

1. **Fork the Repository**
   ```bash
   git clone https://github.com/lessuselesss/johnny-mnemonix.git
   cd johnny-mnemonix
   ```

2. **Set Up Development Environment**
   ```bash
   # Enter development shell
   nix develop
   ```

3. **Make Your Changes**
   - Write clear, concise commit messages
   - Follow the existing code style
   - Add tests for new features
   - Update documentation as needed

## Development Guidelines

### Code Style

- Follow the Nixpkgs coding style
- Use meaningful variable names
- Add comments for complex logic
- Keep functions focused and small

### Commit Messages

Format:
```
type(scope): description

[optional body]
[optional footer]
```

Types:
- feat: New feature
- fix: Bug fix
- docs: Documentation changes
- style: Formatting changes
- refactor: Code restructuring
- test: Adding tests
- chore: Maintenance tasks

### Testing

1. **Run Tests**
   ```bash
   nix flake check
   ```

2. **Test Configuration**
   ```bash
   home-manager build -I johnny-mnemonix=.
   ```

### Documentation

- Update README.md for user-facing changes
- Add/update documentation in docs/
- Include examples for new features
- Document breaking changes

## Pull Request Process

1. **Create Feature Branch**
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Make Changes**
   - Follow development guidelines
   - Keep changes focused
   - Test thoroughly

3. **Submit Pull Request**
   - Describe changes clearly
   - Reference related issues
   - Update documentation
   - Add tests if needed

4. **Review Process**
   - Address review comments
   - Keep discussion focused
   - Be patient and respectful

## Release Process

1. **Version Bumping**
   - Update version in flake.nix
   - Update CHANGELOG.md
   - Create release notes

2. **Testing**
   - Verify all tests pass
   - Check documentation
   - Test installation process

3. **Release**
   - Tag release in git
   - Update documentation
   - Announce changes

## Getting Help

- Open an issue for questions
- Join community discussions
- Read existing documentation

Thank you for contributing to Johnny-Mnemonix!

================
File: default.nix
================
{
  config,
  lib,
  ...
}:
with lib; let
  cfg = config.mnemonic;

  # XDG Base Directory specification
  xdgBase = {
    data = "${config.xdg.dataHome}/johnny-mnemonix";
    config = "${config.xdg.configHome}/johnny-mnemonix";
    cache = "${config.xdg.cacheHome}/johnny-mnemonix";
    state = "${config.xdg.stateHome}/johnny-mnemonix";
  };
in {
  options.mnemonic = {
    enable = mkEnableOption "Johnny Mnemonic document management";

    baseDir = mkOption {
      type = types.str;
      default = "${config.home.homeDirectory}/Documents";
      description = "Base directory for document structure";
    };

    xdgCompliance = mkOption {
      type = types.bool;
      default = true;
      description = "Enforce XDG Base Directory compliance";
    };
  };

  config = mkIf cfg.enable {
    # Store configuration
    xdg.configFile."johnny-mnemonix/config.toml".text = ''
      base_dir = "${cfg.baseDir}"
      xdg_compliance = ${
        if cfg.xdgCompliance
        then "true"
        else "false"
      }
    '';

    # Store templates for new directory structures
    xdg.dataFile = {
      # Basic template with common areas
      "johnny-mnemonix/templates/basic.toml".text = ''
        [[area]]
        id = "10-19"
        name = "Personal"

        [[category]]
        id = "11"
        name = "Finance"
      '';

      # Template for work-related structure
      "johnny-mnemonix/templates/work.toml".text = ''
        [[area]]
        id = "20-29"
        name = "Work"

        [[category]]
        id = "21"
        name = "Projects"
      '';
    };

    # Create required directories
    home.activation.createJohnnyMnemonixDirs = lib.hm.dag.entryAfter ["writeBoundary"] ''
      # Cache directories
      $DRY_RUN_CMD mkdir -p "${xdgBase.cache}/search"  # For search indexes
      $DRY_RUN_CMD mkdir -p "${xdgBase.cache}/temp"    # For temporary operations

      # State directories
      $DRY_RUN_CMD mkdir -p "${xdgBase.state}/history" # Command history
      $DRY_RUN_CMD mkdir -p "${xdgBase.state}/recent"  # Recently accessed paths

      # Data directories
      $DRY_RUN_CMD mkdir -p "${xdgBase.data}/templates"  # User-modified templates
      $DRY_RUN_CMD mkdir -p "${xdgBase.data}/metadata"   # Document metadata
    '';

    # Add shell integration for XDG paths
    programs.bash.initExtra = ''
      export JOHNNY_MNEMONIX_CONFIG="${xdgBase.config}"
      export JOHNNY_MNEMONIX_CACHE="${xdgBase.cache}"
      export JOHNNY_MNEMONIX_DATA="${xdgBase.data}"
      export JOHNNY_MNEMONIX_STATE="${xdgBase.state}"
    '';

    programs.zsh.initExtra = ''
      export JOHNNY_MNEMONIX_CONFIG="${xdgBase.config}"
      export JOHNNY_MNEMONIX_CACHE="${xdgBase.cache}"
      export JOHNNY_MNEMONIX_DATA="${xdgBase.data}"
      export JOHNNY_MNEMONIX_STATE="${xdgBase.state}"
    '';
  };
}

================
File: flake.lock
================
{
  "nodes": {
    "home-manager": {
      "inputs": {
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733389730,
        "narHash": "sha256-KZMu4ddMll5khS0rYkJsVD0hVqjMNHlhTM3PCQar0Ag=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "65912bc6841cf420eb8c0a20e03df7cbbff5963f",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1733212471,
        "narHash": "sha256-M1+uCoV5igihRfcUKrr1riygbe73/dzNnzPsmaLCmpo=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "55d15ad12a74eb7d4646254e13638ad0c4128776",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "home-manager": "home-manager",
        "nixpkgs": "nixpkgs"
      }
    }
  },
  "root": "root",
  "version": 7
}

================
File: flake.nix
================
{
  description = "Johnny Mnemonix - A Johnny Decimal-based Declaritive Document Manager";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = inputs @ {
    self,
    nixpkgs,
    home-manager,
    ...
  }: let
    inherit (inputs.nixpkgs) lib;
    supportedSystems = [
      "x86_64-linux"
      "aarch64-linux"
      "x86_64-darwin"
      "aarch64-darwin"
    ];
    forAllSystems = lib.genAttrs supportedSystems;
    pkgsForSystem = system: inputs.nixpkgs.legacyPackages.${system};
  in {
    # Home Manager modules
    homeManagerModules = rec {
      johnny-mnemonix = ./modules/johnny-mnemonix.nix;
      default = johnny-mnemonix;
    };

    # Development shell for working on the module
    devShells = forAllSystems (system: let
      pkgs = pkgsForSystem system;
    in {
      default = pkgs.mkShell {
        buildInputs = with pkgs; [
          git
          alejandra # don't replace with nixfmt-*
          nil
          pre-commit
          deadnix
          statix
          gnupg
          pinentry-curses
        ];

        # Set up GPG for git commit signing
        shellHook = ''
          export GPG_TTY=$(tty)
          ${pkgs.gnupg}/bin/gpg-connect-agent updatestartuptty /bye > /dev/null
        '';
      };
    });

    # Tests for the module
    checks = forAllSystems (system: let
      pkgs = pkgsForSystem system;
    in {
      # Basic module test
      basic-test = pkgs.runCommand "basic-test" {} ''
        echo "Testing basic module functionality..."
        touch $out
      '';
    });
  };
}

================
File: README.md
================
# Johnny-Mnemonix

> Declarative document management using the Johnny Decimal system, powered by Nix

Johnny-Mnemonix is a Home Manager module that brings the power of declarative configuration to your document management, implementing the [Johnny Decimal](https://johnnydecimal.com/) system in a Nix-native way. It provides a structured, reproducible approach to organizing your `$HOME/Documents` directory (aka your `$HOMEOFFICE`).

## Features

- 🏗️ **Declarative Structure**: Define your entire document hierarchy in Nix, ensuring consistency across systems
- 📁 **Johnny Decimal Implementation**: First-class support for the [Johnny Decimal](https://johnnydecimal.com/) organizational system
- 🔄 **XDG Compliance**: Follows XDG Base Directory specifications for configuration and cache data
- 📝 **Typst Integration**: Seamless integration with [Typix](https://github.com/loqusion/typix) for deterministic document compilation
- 🔍 **Smart Search**: Quick document location using Johnny Decimal codes
- 🔄 **Version Control Ready**: Designed to work well with Git for document versioning
- 🏠 **Home Manager Native**: Integrates naturally with your existing Home Manager configuration

## Directory Structure

When enabled, Johnny-Mnemonix creates the following structure:


```
$HOMEOFFICE/ #($HOME/Documents/)
├── 10-19 Area/
│   ├── ...
│   ├── 15.XX Category/
│   │   ├── ...
│   │   ├── 15.51 ...
│   │   └── 15.52 ID/
│   └── ...
├── x0-x9 Area/
│   ├── ...
│   ├── x0.XX Category/
│   │   ├── ...
│   │   ├── x0.01 ID/
│   │   ├── x0.XX ...
│   │   └── x0.99 ID/
│   └── ...
└── ...
```
<img src="https://johnnydecimal.com/img/v6/11.01A-Diagram_1552_NYC--dtop-1_resize-dark-cx-1000x609.png" style="max-width: 800px; width: 100%" alt="Johnny.Decimal system diagram">

Each component follows the Johnny Decimal system, `analogizing a Book Case`  

`shelf` 

- **Areas**: Groupings of categories (10-19, 20-29, etc.)
  
`box`

- **Categories**: Groupings of items (11, 12, etc.)
  
`book`

- **IDs**: Counter starting at 01 (11.01, 11.02, etc.) 

## Configuration

See our [documentation](./docs/configuration.md) for detailed configuration options and examples.

## Why Johnny-Mnemonix?

The name combines "Johnny Decimal" with "Nix" and pays homage to William Gibson's "Johnny Mnemonic" - a character who stores digital data in his brain. Similarly, Johnny-Mnemonix helps you store and organize your digital life in a structured, reproducible way.

## Installation & Usage

### 1. Add to Flake Inputs
In your system's `flake.nix`, add Johnny-Mnemonix to your inputs:

```nix
{
  inputs = {
    nixpkgs.url = "github:nixpkgs/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    johnny-mnemonix.url = "github:lessuselesss/johnny-mnemonix";
  };

  outputs = { self, nixpkgs, home-manager, johnny-mnemonix }: {
    homeManagerConfigurations.${user} = home-manager.lib.homeManagerConfiguration {
      # Your existing config...
      modules = [
        johnny-mnemonix.homeManagerModules.default
        ./home.nix
      ];
    };
  };
}
```

### 2. Configure Your Document Structure
In your `home.nix` (or other Home Manager configuration file), define your document structure:

```nix
{
  johnny-mnemonix = {
    enable = true;
    # Optional: customize base directory
    baseDir = "${config.home.homeDirectory}/Documents";
    
    areas = {
      "10-19" = {
        name = "Personal";
        categories = {
          "11" = {
            name = "Finance";
            items = {
              "11.01" = "Budget";
              "11.02" = "Investments";
            };
          };
          "12" = {
            name = "Health";
            items = {
              "12.01" = "Medical Records";
              "12.02" = "Fitness Plans";
            };
          };
        };
      };
      "20-29" = {
        name = "Work";
        categories = {
          "21" = {
            name = "Projects";
            items = {
              "21.01" = "Current Project";
              "21.02" = "Project Archive";
            };
          };
        };
      };
    };
  };
}
```

### 3. Apply Configuration
Run Home Manager to create your directory structure:

```bash
home-manager switch
```

This will create a directory structure like:

```
Documents/
├── 10-19 Personal/
│   ├── 11 Finance/
│   │   ├── 11.01 Budget/
│   │   └── 11.02 Investments/
│   └── 12 Health/
│       ├── 12.01 Medical Records/
│       └── 12.02 Fitness Plans/
└── 20-29 Work/
    └── 21 Projects/
        ├── 21.01 Current Project/
        └── 21.02 Project Archive/
```

### 4. Navigate Your Structure
After installation, you can use the provided shell alias to navigate to your document root:

```bash
# Navigate to your document root
jd

# Or navigate to specific directories using standard cd commands
cd ~/Documents/10-19\ Personal/11\ Finance/11.01\ Budget
```

### Important Notes

- The directory structure is created non-destructively (won't overwrite existing directories)
- All directory names must follow the Johnny Decimal format:
  - Areas: XX-YY format (e.g., "10-19")
  - Categories: XX format (e.g., "11")
  - Items: XX.YY format (e.g., "11.01")
- The `jd` alias is available in both bash and zsh
- You can modify the structure by updating your configuration and running `home-manager switch` again

## Integration with Typix

Johnny-Mnemonix seamlessly integrates with Typix for document compilation. Define your Typst documents within your Johnny Decimal structure:

```nix
{
  mnemonic.documents = {
    "11.01.budget-2024" = {
      source = ./documents/budget-2024.typ;
      engine = "typst";
      dependencies = {
        fonts = [ pkgs.inter ];
        data = [ ./data/expenses.csv ];
      };
    };
  };
}
```

## Directory Navigation

Johnny-Mnemonix provides simple, fast navigation to your documents using Johnny Decimal codes. Once configured, you can quickly navigate to any location in your document hierarchy:

```bash
# Navigate directly to a specific ID location
cd ~$11.01   # Goes to $HOMEOFFICE/10-19 Personal/11 Finance/11.01 Budget/

# Or use the full path including document name
cd ~$11.01.annual-budget   # Goes to the specific document location
```

## Contributing

Contributions are welcome! See [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines.

## License

MIT License - See [LICENSE](./LICENSE) for details.
